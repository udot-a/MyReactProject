{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","className","s","autoFocus","onChange","e","target","value","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","profile","activateEditMode","handleSubmit","error","onSubmit","onClick","formSummaryError","createField","Input","type","Textarea","rows","Object","keys","contacts","map","contactTitle","key","contact","ProfileData","isOwner","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","alt","files","length","formData","then","initialValues","Post","item","picture","message","LikeCounter","maxLength30","maxLengthCreator","minLength10","minLengthCreator","MyPosts","memo","count","postsElements","posts","reverse","p","likesCounter","console","log","postsBlock","values","addPost","newPostText","AddNewPostForm","Field","component","name","validate","required","MyPostsContainer","profilePage","postData","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.9853c537.chunk.js","sourcesContent":["import React from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nlet mapStateToPropsRedirect = (state) => {\n    return {\n        isAuth : state.auth.isAuth\n    };\n}\n\nexport const withAuthRedirect = (Component)=> {\n    class RedirectComponent extends React.Component{\n        render(){\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\n            return <Component {...this.props}/>\n        }\n    }\n    let ConnectedRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"status\":\"ProfileInfo_status__2G3BZ\",\"contact\":\"ProfileInfo_contact__1N3gp\",\"formSummaryError\":\"ProfileInfo_formSummaryError__3Pphw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, {useState, useEffect} from 'react';\nimport s from './ProfileInfo.module.css';\n\nconst ProfileStatusWithHooks = (props) => {\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status])\n\n    const activateEditMode =()=>{\n        setEditMode(true);\n    }\n    const deactivateEditMode =()=>{\n        setEditMode(false);\n        props.updateStatus(status)\n    }\n    const onStatusChange = (e) => setStatus( e.target.value)\n\n    return (\n        <div>\n            {\"Status(double click to change): \"}\n            {!editMode &&\n                <div>\n                <span\n                    onDoubleClick={activateEditMode}\n                    className={s.status}\n                >\n                    {props.status||'---no status---'}\n                </span>\n            </div>\n            }\n\n            {editMode &&\n            <div>\n                <input autoFocus={true}\n                       onChange={onStatusChange}\n                       onBlur={deactivateEditMode}\n                       value={status}\n                />\n            </div>\n            }\n\n        </div>\n    );\n\n};\nexport default ProfileStatusWithHooks;","import React from \"react\";\nimport {createField, Input, Textarea} from \"../../common/FormControls/FormsControls\";\nimport {reduxForm} from \"redux-form\";\nimport s from './ProfileInfo.module.css';\n\n\nconst ProfileDataForm =({profile, activateEditMode, handleSubmit, error}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <button onClick={activateEditMode}>save</button>\n            </div>\n            {error &&\n                <div className={s.formSummaryError}>\n                    {error}\n                </div>\n\n            }\n            <div>\n                {\"Full name:\"}\n                {createField(\"Type your full name...\", \"fullName\", null, Input)}\n            </div>\n\n            <div>\n                {\"Looking for a job:\"}\n                {createField(\"\", \"lookingForAJob\", null, Input, {type: \"checkbox\"})}\n\n            </div>\n\n            <div>\n                {\"Professional skills:\"}\n                {createField(\n                    \"Type your professional skils...\",\n                    \"lookingForAJobDescription\",\n                    null,\n                    Textarea,\n                    {rows: 5}\n                )}\n            </div>\n\n            <div>\n                {\"About Me:\"}\n                {createField(\n                    \"Type information about you...\",\n                    \"aboutMe\",\n                    null,\n                    Textarea,\n                    {rows: 7}\n                )}\n            </div>\n\n            <div>\n                Contacts:\n                {Object.keys(profile.contacts)\n                    .map((contactTitle, key) =>(\n                        <div\n                            key={key}\n                            className={s.contact}\n                        >\n                            {contactTitle}\n                            {\":\"}\n                            {createField(\n                                contactTitle + \"...\",\n                                \"contacts.\" + contactTitle,\n                                null,\n                                Input)}\n                        </div>\n                        )\n                    )\n                }\n            </div>\n        </form>\n    );\n}\n\nconst ProfileDataFormReduxForm = reduxForm({form: \"edit-profile\"})(ProfileDataForm);\nexport default ProfileDataFormReduxForm;\n","import React, {useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n    const [editMode, setEditMode] = useState(false);\n\n    if (!profile){\n        return  <Preloader/>\n    }\n    const onMainPhotoSelected = ({target:{files}}) => {\n        if (files.length) {\n            savePhoto(files[0]);\n        }\n    }\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const onSubmit = (formData) => {\n        saveProfile(formData)\n            .then(() => setEditMode(false));\n    }\n\n  return (\n    <div >\n      <div className={s.descriptionBlock}>\n          <img src={profile.photos.large} alt=\"UserPhoto\"/>\n          {isOwner &&\n              <input type={\"file\"} onChange={onMainPhotoSelected}/>\n\n          }\n          {editMode\n              ? <ProfileDataForm\n                  profile={profile}\n                  activateEditMode={activateEditMode}\n                  onSubmit={onSubmit}\n                  initialValues={profile}\n                />\n              : <ProfileData\n                  profile={profile}\n                  isOwner={isOwner}\n                  activateEditMode={activateEditMode}\n                />\n          }\n\n          <ProfileStatusWithHooks status={status} updateStatus = {updateStatus}/>\n        </div>\n    </div>\n  );\n};\n\nconst ProfileData =({profile, isOwner, activateEditMode}) => {\n    return (\n        <>\n            {isOwner &&\n                <div>\n                    <button onClick={activateEditMode}>edit</button>\n                </div>\n            }\n            <p>Меня зовут: {profile.fullName}</p>\n            <p>В настоящий момент я {profile.lookingForAJob?'ищу работу !!!':'работаю по специальности.'}</p>\n            {profile.lookingForAJob&&\n            <p>Мои профессиональные навыки: {profile.lookingForAJobDescription}</p>\n\n            }\n            <p>About Me: {profile.aboutMe}</p>\n\n            <div>\n                Contacts:\n                {Object.keys(profile.contacts)\n                    .map((contactTitle, key) =>\n                        <Contact\n                            key={key}\n                            contactTitle={contactTitle}\n                            contactValue={profile.contacts[contactTitle]}\n                        />\n                    )}\n            </div>\n            <br/>\n        </>\n    );\n}\n\nconst Contact = ({contactTitle, contactValue}) => {\n    return (\n        <div className={s.contact}>\n            {contactTitle}: {contactValue}\n        </div>\n    );\n}\nexport default ProfileInfo;","import React from 'react';\nimport s from './Post.module.css';\nconst Post = (props) => {\n  return (\n    <div className={s.item}>\n      <img src={props.picture} />\n      {props.message}\n      <div>\n        <span>{props.LikeCounter} Like</span>\n      </div>\n    </div>\n  );\n};\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post'\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, minLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormControls/FormsControls\";\n\nconst maxLength30 = maxLengthCreator(30)\nconst minLength10 = minLengthCreator(10)\n\n\nconst MyPosts = React.memo(props => {\n    let count = 0\n    let postsElements =\n        [...props.posts].reverse().map(p => (\n            <Post key={count++} message={p.message} picture={p.picture} LikeCounter={p.likesCounter}/>));\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText);\n        values.newPostText = '';\n    }\nconsole.log('RENDER YO')\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div className={s.posts}>\n                {postsElements}\n                <AddNewPostForm onSubmit={onAddPost}/>\n            </div>\n        </div>\n    );\n});\n\nlet AddNewPostForm =(props)=>{\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} name='newPostText'\n                       validate={[required, maxLength30, minLength10]} />\n            </div>\n            <div>\n                <button >New Post</button>\n            </div>\n        </form>\n\n    )\n}\nAddNewPostForm = reduxForm({form:'ProfileAddNewPostForm'})(AddNewPostForm)\nexport default MyPosts;","import React from 'react';\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.postData,\n        newPostText: state.profilePage.newPostText\n    };\n}\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    };\n}\n\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\nconst Profile = (props) => {\n    return (\n        <div>\n            <ProfileInfo\n                profile={props.profile}\n                status={props.status}\n                updateStatus={props.updateStatus}\n                isOwner={props.isOwner}\n                savePhoto={props.savePhoto}\n                saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n};\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nclass ProfileContainer extends React.Component {\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile = {this.props.profile}\n                     status={this.props.status}\n                     updateStatus = {this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}\n                     saveProfile={this.props.saveProfile}\n            />\n        );\n    }\n}\n\n\nlet mapStateToProps = (state) =>({\n    profile:state.profilePage.profile,\n    status:state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n\n})\n\nexport default compose(\n    connect(mapStateToProps,{\n        getUserProfile, getStatus, updateStatus, savePhoto, saveProfile\n    }),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n"],"sourceRoot":""}