{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","className","s","dialog","active","id","picture","src","alt","name","Message","message","maxLength30","maxLengthCreator","minLength10","minLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","messagePage","dialogsElements","dialogsData","map","key","messagesElements","messagesData","el","dialogs","dialogsItems","messages","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,QAAU,2B,uICElPC,EAA0B,SAACC,GAC3B,MAAO,CACHC,OAASD,EAAME,KAAKD,SAIfE,EAAmB,SAACC,GAAc,IACrCC,EADoC,uKAGlC,OAAKC,KAAKC,MAAMN,OACT,kBAACG,EAAcE,KAAKC,OADI,kBAAC,IAAD,CAAUC,GAAI,eAHX,GACVC,IAAML,WAOtC,OADiCM,YAAQX,EAARW,CAAiCL,K,+FCDvDM,EATI,SAACJ,GAChB,OACI,yBAAKK,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAASP,GAAI,YAAcD,EAAMS,IAAI,yBAAKJ,UAAWC,IAAEI,QAASC,IAAKX,EAAMU,QAASE,IAAK,gBAAzF,IAA2GZ,EAAMa,QCA9GC,EANC,SAACd,GACb,OACI,yBAAKK,UAAWC,IAAES,SAAUf,EAAMe,U,iCCGpCC,EAAcC,YAAiB,IAC/BC,EAAcC,YAAiB,IA4C/BC,EAAsBC,YAAU,CAACC,KAAK,wBAAhBD,EAdL,SAACrB,GACpB,OACI,0BAAMuB,SAAUvB,EAAMwB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUd,KAAK,iBAAiBe,YAAY,wBACvDC,SAAU,CAACC,IAAUd,EAAaE,MAE7C,6BACI,6CAODa,EA3CC,SAAC/B,GACb,IAAIP,EAAQO,EAAMgC,YAEdC,EACAxC,EAAMyC,YAAYC,KAAI,SAAA5B,GAAM,OACxB,kBAAC,EAAD,CAAYM,KAAMN,EAAOM,KAAMJ,GAAIF,EAAOE,GAAIC,QAASH,EAAOG,QAAS0B,IAAK7B,EAAOE,QAEvF4B,EACA5C,EAAM6C,aAAaH,KAAI,SAAAI,GAAE,OAAK,kBAAC,EAAD,CAASxB,QAASwB,EAAGxB,QAASqB,IAAKG,EAAG9B,QAMxE,OACI,yBAAKJ,UAAWC,IAAEkC,SACd,yBAAKnC,UAAWC,IAAEmC,cACbR,GAGL,yBAAK5B,UAAWC,IAAEoC,UACd,6BAAML,GACN,kBAACjB,EAAD,CAAqBG,SAZb,SAACoB,GACjB3C,EAAM4C,YAAYD,EAAOE,gBACzBF,EAAOE,eAAiB,S,wBCHjBC,sBACX3C,aAfkB,SAACV,GACnB,MAAO,CACHuC,YAAavC,EAAMuC,gBAIF,SAACe,GACtB,MAAO,CACHH,YAAa,SAACC,GACVE,EAASC,YAAmBH,SAOpCjD,IAFWkD,CAGbf","file":"static/js/4.2d1f2de4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"picture\":\"Dialogs_picture__TmmpP\"};","import React from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nlet mapStateToPropsRedirect = (state) => {\n    return {\n        isAuth : state.auth.isAuth\n    };\n}\n\nexport const withAuthRedirect = (Component)=> {\n    class RedirectComponent extends React.Component{\n        render(){\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\n            return <Component {...this.props}/>\n        }\n    }\n    let ConnectedRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","import React from 'react'\nimport s from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\n\n\nconst DialogItem = (props) => {\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={'/dialogs/' + props.id}><img className={s.picture} src={props.picture} alt={\"Somebody...\"}/> {props.name}</NavLink>\n        </div>\n\n    )\n}\n\nexport default DialogItem;","import React from 'react'\nimport s from './../Dialogs.module.css'\n\nconst Message = (props) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}\n\nexport default Message;","import React from 'react'\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormControls/FormsControls\";\nimport {maxLengthCreator, minLengthCreator, required} from \"../../utils/validators/validators\";\n\nconst maxLength30 = maxLengthCreator(30)\nconst minLength10 = minLengthCreator(10)\n\nconst Dialogs = (props) => {\n    let state = props.messagePage;\n\n    let dialogsElements =\n        state.dialogsData.map(dialog => (\n            <DialogItem name={dialog.name} id={dialog.id} picture={dialog.picture} key={dialog.id}/>));\n\n    let messagesElements =\n        state.messagesData.map(el => (<Message message={el.message} key={el.id}/>));\n\n    const addNewMessage=(values)=>{\n        props.sendMessage(values.newMessageBody);\n        values.newMessageBody = '';\n    }\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\n            </div>\n        </div>\n\n    )\n}\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} name='newMessageBody' placeholder='Enter your message...'\n                       validate={[required, maxLength30, minLength10]}/>\n            </div>\n            <div>\n                <button >Send</button>\n            </div>\n        </form>\n\n    )\n}\nconst AddMessageFormRedux = reduxForm({form:'dialogAddMessageForm'})(AddMessageForm)\nexport default Dialogs;\n\n","import {sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        messagePage: state.messagePage\n    };\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageCreator(newMessageBody))\n        }\n    };\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);"],"sourceRoot":""}